
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b0  080006b0  000106b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006b4  080006b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006b8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006bc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016d6  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000744  00000000  00000000  00021702  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f0  00000000  00000000  00021e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00022038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ac0b  00000000  00000000  000221d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002463  00000000  00000000  0002cddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003f6ad  00000000  00000000  0002f23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006e8eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  0006e968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000694 	.word	0x08000694

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000694 	.word	0x08000694

08000108 <main>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

static void MX_GPIO_Init(void);
int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
  	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800010e:	4b1f      	ldr	r3, [pc, #124]	; (800018c <main+0x84>)
 8000110:	695a      	ldr	r2, [r3, #20]
 8000112:	4b1e      	ldr	r3, [pc, #120]	; (800018c <main+0x84>)
 8000114:	2180      	movs	r1, #128	; 0x80
 8000116:	0289      	lsls	r1, r1, #10
 8000118:	430a      	orrs	r2, r1
 800011a:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 800011c:	2390      	movs	r3, #144	; 0x90
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	681a      	ldr	r2, [r3, #0]
 8000122:	2390      	movs	r3, #144	; 0x90
 8000124:	05db      	lsls	r3, r3, #23
 8000126:	2180      	movs	r1, #128	; 0x80
 8000128:	00c9      	lsls	r1, r1, #3
 800012a:	430a      	orrs	r2, r1
 800012c:	601a      	str	r2, [r3, #0]
	MX_GPIO_Init();
 800012e:	f000 f833 	bl	8000198 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		for(uint8_t i = 0; i < 32;i++){
 8000132:	1dfb      	adds	r3, r7, #7
 8000134:	2200      	movs	r2, #0
 8000136:	701a      	strb	r2, [r3, #0]
 8000138:	e023      	b.n	8000182 <main+0x7a>
		    if(string & (1<<(32-i))){
 800013a:	1dfb      	adds	r3, r7, #7
 800013c:	781b      	ldrb	r3, [r3, #0]
 800013e:	2220      	movs	r2, #32
 8000140:	1ad3      	subs	r3, r2, r3
 8000142:	2201      	movs	r2, #1
 8000144:	409a      	lsls	r2, r3
 8000146:	0013      	movs	r3, r2
 8000148:	001a      	movs	r2, r3
 800014a:	4b11      	ldr	r3, [pc, #68]	; (8000190 <main+0x88>)
 800014c:	681b      	ldr	r3, [r3, #0]
 800014e:	4013      	ands	r3, r2
 8000150:	d004      	beq.n	800015c <main+0x54>
		       GPIOA->BSRR = (1<<5);  // set
 8000152:	2390      	movs	r3, #144	; 0x90
 8000154:	05db      	lsls	r3, r3, #23
 8000156:	2220      	movs	r2, #32
 8000158:	619a      	str	r2, [r3, #24]
 800015a:	e003      	b.n	8000164 <main+0x5c>
		               }
		    else{
		       GPIOA->BRR = (1<<5);  // reset
 800015c:	2390      	movs	r3, #144	; 0x90
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	2220      	movs	r2, #32
 8000162:	629a      	str	r2, [r3, #40]	; 0x28
		        }
		  for (volatile uint32_t i = 0; i < 100000; i++) {} ;
 8000164:	2300      	movs	r3, #0
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	e002      	b.n	8000170 <main+0x68>
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	603b      	str	r3, [r7, #0]
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	4a08      	ldr	r2, [pc, #32]	; (8000194 <main+0x8c>)
 8000174:	4293      	cmp	r3, r2
 8000176:	d9f8      	bls.n	800016a <main+0x62>
		for(uint8_t i = 0; i < 32;i++){
 8000178:	1dfb      	adds	r3, r7, #7
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	1dfb      	adds	r3, r7, #7
 800017e:	3201      	adds	r2, #1
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b1f      	cmp	r3, #31
 8000188:	d9d7      	bls.n	800013a <main+0x32>
 800018a:	e7d2      	b.n	8000132 <main+0x2a>
 800018c:	40021000 	.word	0x40021000
 8000190:	080006ac 	.word	0x080006ac
 8000194:	0001869f 	.word	0x0001869f

08000198 <MX_GPIO_Init>:
    Error_Handler();
  }
}

static void MX_GPIO_Init(void)
{
 8000198:	b590      	push	{r4, r7, lr}
 800019a:	b089      	sub	sp, #36	; 0x24
 800019c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	240c      	movs	r4, #12
 80001a0:	193b      	adds	r3, r7, r4
 80001a2:	0018      	movs	r0, r3
 80001a4:	2314      	movs	r3, #20
 80001a6:	001a      	movs	r2, r3
 80001a8:	2100      	movs	r1, #0
 80001aa:	f000 fa6b 	bl	8000684 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ae:	4b2c      	ldr	r3, [pc, #176]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001b0:	695a      	ldr	r2, [r3, #20]
 80001b2:	4b2b      	ldr	r3, [pc, #172]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001b4:	2180      	movs	r1, #128	; 0x80
 80001b6:	0309      	lsls	r1, r1, #12
 80001b8:	430a      	orrs	r2, r1
 80001ba:	615a      	str	r2, [r3, #20]
 80001bc:	4b28      	ldr	r3, [pc, #160]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001be:	695a      	ldr	r2, [r3, #20]
 80001c0:	2380      	movs	r3, #128	; 0x80
 80001c2:	031b      	lsls	r3, r3, #12
 80001c4:	4013      	ands	r3, r2
 80001c6:	60bb      	str	r3, [r7, #8]
 80001c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001ca:	4b25      	ldr	r3, [pc, #148]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001cc:	695a      	ldr	r2, [r3, #20]
 80001ce:	4b24      	ldr	r3, [pc, #144]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001d0:	2180      	movs	r1, #128	; 0x80
 80001d2:	03c9      	lsls	r1, r1, #15
 80001d4:	430a      	orrs	r2, r1
 80001d6:	615a      	str	r2, [r3, #20]
 80001d8:	4b21      	ldr	r3, [pc, #132]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001da:	695a      	ldr	r2, [r3, #20]
 80001dc:	2380      	movs	r3, #128	; 0x80
 80001de:	03db      	lsls	r3, r3, #15
 80001e0:	4013      	ands	r3, r2
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001e8:	695a      	ldr	r2, [r3, #20]
 80001ea:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001ec:	2180      	movs	r1, #128	; 0x80
 80001ee:	0289      	lsls	r1, r1, #10
 80001f0:	430a      	orrs	r2, r1
 80001f2:	615a      	str	r2, [r3, #20]
 80001f4:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <MX_GPIO_Init+0xc8>)
 80001f6:	695a      	ldr	r2, [r3, #20]
 80001f8:	2380      	movs	r3, #128	; 0x80
 80001fa:	029b      	lsls	r3, r3, #10
 80001fc:	4013      	ands	r3, r2
 80001fe:	603b      	str	r3, [r7, #0]
 8000200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000202:	2390      	movs	r3, #144	; 0x90
 8000204:	05db      	lsls	r3, r3, #23
 8000206:	2200      	movs	r2, #0
 8000208:	2120      	movs	r1, #32
 800020a:	0018      	movs	r0, r3
 800020c:	f000 f9f8 	bl	8000600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000210:	193b      	adds	r3, r7, r4
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	0192      	lsls	r2, r2, #6
 8000216:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000218:	193b      	adds	r3, r7, r4
 800021a:	4a12      	ldr	r2, [pc, #72]	; (8000264 <MX_GPIO_Init+0xcc>)
 800021c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021e:	193b      	adds	r3, r7, r4
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000224:	193b      	adds	r3, r7, r4
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <MX_GPIO_Init+0xd0>)
 8000228:	0019      	movs	r1, r3
 800022a:	0010      	movs	r0, r2
 800022c:	f000 f878 	bl	8000320 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000230:	0021      	movs	r1, r4
 8000232:	187b      	adds	r3, r7, r1
 8000234:	2220      	movs	r2, #32
 8000236:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000238:	187b      	adds	r3, r7, r1
 800023a:	2201      	movs	r2, #1
 800023c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023e:	187b      	adds	r3, r7, r1
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	187b      	adds	r3, r7, r1
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800024a:	187a      	adds	r2, r7, r1
 800024c:	2390      	movs	r3, #144	; 0x90
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f864 	bl	8000320 <HAL_GPIO_Init>

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b009      	add	sp, #36	; 0x24
 800025e:	bd90      	pop	{r4, r7, pc}
 8000260:	40021000 	.word	0x40021000
 8000264:	10210000 	.word	0x10210000
 8000268:	48000800 	.word	0x48000800

0800026c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <HardFault_Handler+0x4>

0800027c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000294:	f000 f832 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490e      	ldr	r1, [pc, #56]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0b      	ldr	r4, [pc, #44]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d2:	f7ff ffe4 	bl	800029e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f9b1 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff15 	bl	8000108 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002ec:	080006b8 	.word	0x080006b8
  ldr r2, =_sbss
 80002f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f4:	20000024 	.word	0x20000024

080002f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_IRQHandler>
	...

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <HAL_IncTick+0x1c>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <HAL_IncTick+0x20>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	18d2      	adds	r2, r2, r3
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <HAL_IncTick+0x20>)
 800030e:	601a      	str	r2, [r3, #0]
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	20000000 	.word	0x20000000
 800031c:	20000020 	.word	0x20000020

08000320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800032e:	e14f      	b.n	80005d0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2101      	movs	r1, #1
 8000336:	697a      	ldr	r2, [r7, #20]
 8000338:	4091      	lsls	r1, r2
 800033a:	000a      	movs	r2, r1
 800033c:	4013      	ands	r3, r2
 800033e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d100      	bne.n	8000348 <HAL_GPIO_Init+0x28>
 8000346:	e140      	b.n	80005ca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d00b      	beq.n	8000368 <HAL_GPIO_Init+0x48>
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d007      	beq.n	8000368 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800035c:	2b11      	cmp	r3, #17
 800035e:	d003      	beq.n	8000368 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	2b12      	cmp	r3, #18
 8000366:	d130      	bne.n	80003ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	2203      	movs	r2, #3
 8000374:	409a      	lsls	r2, r3
 8000376:	0013      	movs	r3, r2
 8000378:	43da      	mvns	r2, r3
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	4013      	ands	r3, r2
 800037e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	68da      	ldr	r2, [r3, #12]
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	409a      	lsls	r2, r3
 800038a:	0013      	movs	r3, r2
 800038c:	693a      	ldr	r2, [r7, #16]
 800038e:	4313      	orrs	r3, r2
 8000390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	693a      	ldr	r2, [r7, #16]
 8000396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800039e:	2201      	movs	r2, #1
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	409a      	lsls	r2, r3
 80003a4:	0013      	movs	r3, r2
 80003a6:	43da      	mvns	r2, r3
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	4013      	ands	r3, r2
 80003ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	091b      	lsrs	r3, r3, #4
 80003b4:	2201      	movs	r2, #1
 80003b6:	401a      	ands	r2, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	409a      	lsls	r2, r3
 80003bc:	0013      	movs	r3, r2
 80003be:	693a      	ldr	r2, [r7, #16]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	693a      	ldr	r2, [r7, #16]
 80003c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	2203      	movs	r2, #3
 80003d6:	409a      	lsls	r2, r3
 80003d8:	0013      	movs	r3, r2
 80003da:	43da      	mvns	r2, r3
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	4013      	ands	r3, r2
 80003e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	409a      	lsls	r2, r3
 80003ec:	0013      	movs	r3, r2
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	693a      	ldr	r2, [r7, #16]
 80003f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d003      	beq.n	800040a <HAL_GPIO_Init+0xea>
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	2b12      	cmp	r3, #18
 8000408:	d123      	bne.n	8000452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	08da      	lsrs	r2, r3, #3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	0092      	lsls	r2, r2, #2
 8000414:	58d3      	ldr	r3, [r2, r3]
 8000416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	2207      	movs	r2, #7
 800041c:	4013      	ands	r3, r2
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	220f      	movs	r2, #15
 8000422:	409a      	lsls	r2, r3
 8000424:	0013      	movs	r3, r2
 8000426:	43da      	mvns	r2, r3
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	4013      	ands	r3, r2
 800042c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	691a      	ldr	r2, [r3, #16]
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	2107      	movs	r1, #7
 8000436:	400b      	ands	r3, r1
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	409a      	lsls	r2, r3
 800043c:	0013      	movs	r3, r2
 800043e:	693a      	ldr	r2, [r7, #16]
 8000440:	4313      	orrs	r3, r2
 8000442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	08da      	lsrs	r2, r3, #3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3208      	adds	r2, #8
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	6939      	ldr	r1, [r7, #16]
 8000450:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	2203      	movs	r2, #3
 800045e:	409a      	lsls	r2, r3
 8000460:	0013      	movs	r3, r2
 8000462:	43da      	mvns	r2, r3
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	4013      	ands	r3, r2
 8000468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	2203      	movs	r2, #3
 8000470:	401a      	ands	r2, r3
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	409a      	lsls	r2, r3
 8000478:	0013      	movs	r3, r2
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	4313      	orrs	r3, r2
 800047e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	055b      	lsls	r3, r3, #21
 800048e:	4013      	ands	r3, r2
 8000490:	d100      	bne.n	8000494 <HAL_GPIO_Init+0x174>
 8000492:	e09a      	b.n	80005ca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000494:	4b54      	ldr	r3, [pc, #336]	; (80005e8 <HAL_GPIO_Init+0x2c8>)
 8000496:	699a      	ldr	r2, [r3, #24]
 8000498:	4b53      	ldr	r3, [pc, #332]	; (80005e8 <HAL_GPIO_Init+0x2c8>)
 800049a:	2101      	movs	r1, #1
 800049c:	430a      	orrs	r2, r1
 800049e:	619a      	str	r2, [r3, #24]
 80004a0:	4b51      	ldr	r3, [pc, #324]	; (80005e8 <HAL_GPIO_Init+0x2c8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	2201      	movs	r2, #1
 80004a6:	4013      	ands	r3, r2
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80004ac:	4a4f      	ldr	r2, [pc, #316]	; (80005ec <HAL_GPIO_Init+0x2cc>)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	089b      	lsrs	r3, r3, #2
 80004b2:	3302      	adds	r3, #2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	589b      	ldr	r3, [r3, r2]
 80004b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	2203      	movs	r2, #3
 80004be:	4013      	ands	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	220f      	movs	r2, #15
 80004c4:	409a      	lsls	r2, r3
 80004c6:	0013      	movs	r3, r2
 80004c8:	43da      	mvns	r2, r3
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	4013      	ands	r3, r2
 80004ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d013      	beq.n	8000502 <HAL_GPIO_Init+0x1e2>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a44      	ldr	r2, [pc, #272]	; (80005f0 <HAL_GPIO_Init+0x2d0>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d00d      	beq.n	80004fe <HAL_GPIO_Init+0x1de>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a43      	ldr	r2, [pc, #268]	; (80005f4 <HAL_GPIO_Init+0x2d4>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d007      	beq.n	80004fa <HAL_GPIO_Init+0x1da>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a42      	ldr	r2, [pc, #264]	; (80005f8 <HAL_GPIO_Init+0x2d8>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d101      	bne.n	80004f6 <HAL_GPIO_Init+0x1d6>
 80004f2:	2303      	movs	r3, #3
 80004f4:	e006      	b.n	8000504 <HAL_GPIO_Init+0x1e4>
 80004f6:	2305      	movs	r3, #5
 80004f8:	e004      	b.n	8000504 <HAL_GPIO_Init+0x1e4>
 80004fa:	2302      	movs	r3, #2
 80004fc:	e002      	b.n	8000504 <HAL_GPIO_Init+0x1e4>
 80004fe:	2301      	movs	r3, #1
 8000500:	e000      	b.n	8000504 <HAL_GPIO_Init+0x1e4>
 8000502:	2300      	movs	r3, #0
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	2103      	movs	r1, #3
 8000508:	400a      	ands	r2, r1
 800050a:	0092      	lsls	r2, r2, #2
 800050c:	4093      	lsls	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4313      	orrs	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000514:	4935      	ldr	r1, [pc, #212]	; (80005ec <HAL_GPIO_Init+0x2cc>)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	3302      	adds	r3, #2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000522:	4b36      	ldr	r3, [pc, #216]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	43da      	mvns	r2, r3
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	4013      	ands	r3, r2
 8000530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	2380      	movs	r3, #128	; 0x80
 8000538:	025b      	lsls	r3, r3, #9
 800053a:	4013      	ands	r3, r2
 800053c:	d003      	beq.n	8000546 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4313      	orrs	r3, r2
 8000544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 8000548:	693a      	ldr	r2, [r7, #16]
 800054a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	43da      	mvns	r2, r3
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	4013      	ands	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	029b      	lsls	r3, r3, #10
 8000564:	4013      	ands	r3, r2
 8000566:	d003      	beq.n	8000570 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4313      	orrs	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	43da      	mvns	r2, r3
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	4013      	ands	r3, r2
 8000584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	035b      	lsls	r3, r3, #13
 800058e:	4013      	ands	r3, r2
 8000590:	d003      	beq.n	800059a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4313      	orrs	r3, r2
 8000598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	43da      	mvns	r2, r3
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	039b      	lsls	r3, r3, #14
 80005b8:	4013      	ands	r3, r2
 80005ba:	d003      	beq.n	80005c4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <HAL_GPIO_Init+0x2dc>)
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	40da      	lsrs	r2, r3
 80005d8:	1e13      	subs	r3, r2, #0
 80005da:	d000      	beq.n	80005de <HAL_GPIO_Init+0x2be>
 80005dc:	e6a8      	b.n	8000330 <HAL_GPIO_Init+0x10>
  } 
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b006      	add	sp, #24
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010000 	.word	0x40010000
 80005f0:	48000400 	.word	0x48000400
 80005f4:	48000800 	.word	0x48000800
 80005f8:	48000c00 	.word	0x48000c00
 80005fc:	40010400 	.word	0x40010400

08000600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	0008      	movs	r0, r1
 800060a:	0011      	movs	r1, r2
 800060c:	1cbb      	adds	r3, r7, #2
 800060e:	1c02      	adds	r2, r0, #0
 8000610:	801a      	strh	r2, [r3, #0]
 8000612:	1c7b      	adds	r3, r7, #1
 8000614:	1c0a      	adds	r2, r1, #0
 8000616:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000618:	1c7b      	adds	r3, r7, #1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000620:	1cbb      	adds	r3, r7, #2
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000628:	e003      	b.n	8000632 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	2600      	movs	r6, #0
 8000640:	4d0c      	ldr	r5, [pc, #48]	; (8000674 <__libc_init_array+0x38>)
 8000642:	4c0d      	ldr	r4, [pc, #52]	; (8000678 <__libc_init_array+0x3c>)
 8000644:	1b64      	subs	r4, r4, r5
 8000646:	10a4      	asrs	r4, r4, #2
 8000648:	42a6      	cmp	r6, r4
 800064a:	d109      	bne.n	8000660 <__libc_init_array+0x24>
 800064c:	2600      	movs	r6, #0
 800064e:	f000 f821 	bl	8000694 <_init>
 8000652:	4d0a      	ldr	r5, [pc, #40]	; (800067c <__libc_init_array+0x40>)
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <__libc_init_array+0x44>)
 8000656:	1b64      	subs	r4, r4, r5
 8000658:	10a4      	asrs	r4, r4, #2
 800065a:	42a6      	cmp	r6, r4
 800065c:	d105      	bne.n	800066a <__libc_init_array+0x2e>
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	00b3      	lsls	r3, r6, #2
 8000662:	58eb      	ldr	r3, [r5, r3]
 8000664:	4798      	blx	r3
 8000666:	3601      	adds	r6, #1
 8000668:	e7ee      	b.n	8000648 <__libc_init_array+0xc>
 800066a:	00b3      	lsls	r3, r6, #2
 800066c:	58eb      	ldr	r3, [r5, r3]
 800066e:	4798      	blx	r3
 8000670:	3601      	adds	r6, #1
 8000672:	e7f2      	b.n	800065a <__libc_init_array+0x1e>
 8000674:	080006b0 	.word	0x080006b0
 8000678:	080006b0 	.word	0x080006b0
 800067c:	080006b0 	.word	0x080006b0
 8000680:	080006b4 	.word	0x080006b4

08000684 <memset>:
 8000684:	0003      	movs	r3, r0
 8000686:	1812      	adds	r2, r2, r0
 8000688:	4293      	cmp	r3, r2
 800068a:	d100      	bne.n	800068e <memset+0xa>
 800068c:	4770      	bx	lr
 800068e:	7019      	strb	r1, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	e7f9      	b.n	8000688 <memset+0x4>

08000694 <_init>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr

080006a0 <_fini>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr
